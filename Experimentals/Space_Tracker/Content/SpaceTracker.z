/******************************************************************************/
/*!
@brief      Used to keep track of spaces in the current game.
@details
            Requires 'SpaceUpdateSender' on the default Space archetype.
*/
/******************************************************************************/

enum ClassLayers {  Root       = 0,
                    Background = 1, 
                    GameHud    = 2,
                    EditGizmos = 3,
                    EditorUI   = 4,
                    DebugUI    = 5 }

class SpaceTracker : ZilchComponent
{
    var ShowDebug : Boolean = true;
    
    var SpaceArray : Array[Space] = new Array[Space]();
    var MainSpace : Space;
    
    var Count : Integer
    {
        get
        {
            return this.SpaceArray.Count;
        }
    }
    
    function Initialize(init : CogInitializer)
    {
        // the SpaceUpdate Event -should- occur before the GameStarted event.
        Zero.Connect(this.GameSession, Events.SpaceUpdate, this.OnSpaceUpdate);
        Zero.Connect(this.GameSession, Events.GameStarted, this.OnGameStarted);
    }


    // We listen for events sent by the SpaceUpdateSender and update our map accordingly
    function OnSpaceUpdate(event : SpaceUpdateEvent)
    {
        // Space Created
        if(event.State == SpaceUpdateState.Created && event.Space != null)
        {
            this.AddSpace(event.Space);
        }
        
        // Space Removed
        if(event.State == SpaceUpdateState.Destroyed && event.Space != null)
        {
            this.RemoveSpace(event.Space);
        }
    }
    
    
    /*
        If everything is set up correctly, our SpaceMap should have at least the default space added
        to it by the time the GameStarted event is sent.
        
        Therefore if our SpaceMap is empty when this event is called, something is very wrong.
        
        Most likely the 'SpaceUpdateSender' component is missing from the default Space Archetype.
    */
    function OnGameStarted(event : GameEvent)
    {
        if(this.SpaceArray.Count < 1)
        {
           throw new Exception("WARNING! No Space Creation Detected.");
        }
        else
        {
            this.MainSpace = this.GameSession.FindSpaceByName("Main");
        }
    }
    
    
    // Accessor function for adding a given space to the Space Map
    function AddSpace(space : Space)
    {
        if(this.ShowDebug)
        {
            JDebug("SpaceMetaManager: Space `space` was added.");
        }
        
        // only add if it does not already exist
        if(this.SpaceArray.FindFirstIndex(space) == -1)
        {
            this.SpaceArray.Add(space);
        }
    }
    
    
    // Accessor function for removing a given space from the Space Map
    function RemoveSpace(space : Space)
    {
        if(this.ShowDebug)
        {
            JDebug("SpaceMetaManager: Space `space` was removed.");
        }
        this.SpaceArray.RemoveAll(space);
    }
    
    
    // returns the maximum viewport layer value of all current spaces
    function GetMaxSpaceLayer() : Integer
    {
        var result = -1;
        foreach(var space in this.SpaceArray)
        {
            var layer = this.GetSpaceLayer(space);
            if(layer > result)
            {
                result = layer;
            }
        }
        return result;
    }
    
    
    // returns the minimum viewport layer value of all current spaces
    function GetMinSpaceLayer() : Integer
    {
        var haveMin = false;
        var result = 0;
        foreach(var space in this.SpaceArray)
        {
            var layer = this.GetSpaceLayer(space);
            if(layer > result || !haveMin)
            {
                result = layer;
                haveMin = true;
            }
        }
        return result;
    }
    
    
    // returns a debug string for the given space
    function GetSpaceInfo(space : Space) : String
    {
        var strBuilder = new StringBuilder();
        strBuilder.Write("Space: \"`space.Name`\" - `space`\n");
        
        var level = space.CurrentLevel;
        if(level != null)
        {
            strBuilder.Write("\tLevel: \"`level.Name`\" - `level`\n");
            var viewport = space.LevelSettings.CameraViewport;
            strBuilder.Write("\tActive: `viewport.Active`\n");
            strBuilder.Write("\tLayer: `viewport.Layer`");
        }
        else
        {
            strBuilder.Write("\tLevel: <NONE>");
        }
        
        return strBuilder.ToString();
    }
    
    
    // print debug strings for each space to the console
    function DebugDump()
    {
        JDebug("========================");
        JDebug("`this.Count` Spaces:");
        foreach(var space in this.SpaceArray)
        {
            JDebug(this.GetSpaceInfo(space));
        }
    }
    
    
    // sort the current space array by viewport layer
    function Sort()
    {
        this.SpaceArray.Sort(this.CompareSpaceByLayer);
    }
    
    
    // given two spaces, compare them based on their layer
    function CompareSpaceByLayer(left : Space, right : Space) : Integer
    {
        var result = 0;
        
        var l_layer = this.GetSpaceLayer(left);
        var r_layer = this.GetSpaceLayer(right);
        
        result += (l_layer > r_layer) as Integer;
        result -= (l_layer < r_layer) as Integer;
        
        return result;
    }
    
    
    // given a space, return its layer (-1000 if none)
    function GetSpaceLayer(space : Space) : Integer
    {
        var layer = -1000;
        
        if(space.CurrentLevel != null)
        {
            layer = space.LevelSettings.CameraViewport.Layer;
        }
        return layer;
    }
    
}
