/******************************************************************************/
/*!
@brief      Used with 'SpaceMetaManager' to keep track of the spaces in the game
*/
/******************************************************************************/

enum SpaceUpdateState { Created, Destroyed }

class SpaceUpdateEvent : ZilchEvent
{
    var State : SpaceUpdateState;
    var Space : Space;
    
    constructor() : base() {}
    constructor(state : SpaceUpdateState) : base()
    {
        this.State = state;
    }
}

class SpaceUpdateSender : ZilchComponent
{
    sends SpaceUpdate : SpaceUpdateEvent;
    
    // reffs to hold onto variables that would be removed before destructor is called
    var SessionReff : GameSession;
    var SpaceReff : Space;
    
    function Initialize(init : CogInitializer)
    {
        this.SessionReff = this.GameSession;
        this.SpaceReff   = this.Space;
        
        var newEvent = new SpaceUpdateEvent();
        newEvent.State = SpaceUpdateState.Created;
        newEvent.Space = this.SpaceReff;
        
        this.SessionReff.DispatchEvent(Events.SpaceUpdate, newEvent);
    }
    
    destructor()
    {
        if(this.SessionReff != null)
        {
            var newEvent = new SpaceUpdateEvent();
            newEvent.State = SpaceUpdateState.Destroyed;
            newEvent.Space = this.SpaceReff;
            this.SessionReff.DispatchEvent(Events.SpaceUpdate, newEvent);
        }
    }
}
