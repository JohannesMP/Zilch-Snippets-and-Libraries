// See OnKeyDown


class SpaceTest : ZilchComponent
{
    [Dependency]
    var SpaceTracker : SpaceTracker;
    var CurSpace : Space ;
    var Object : Cog;
    
    function Initialize(init : CogInitializer)
    {
        //Zero.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate);
        Zero.Connect(Zero.Keyboard, Events.KeyDown, this.OnKeyDown);
    }

    function OnKeyDown(event : KeyboardEvent)
    {
        // print out the current spaces (and corresponding level information if they have it)
        if(event.Key == Keys.L)
        {
            this.GameSession.SpaceTracker.DebugDump();
        }
        
        // sort the spaces by their level's viewport layer
        if(event.Key == Keys.S)
        {
            JDebug("SpaceArray Sorted!");
            this.GameSession.SpaceTracker.Sort();
        }
        
        // create a new space
        if(event.Key == Keys.N)
        {
            var num = this.SpaceTracker.Count+1;
            this.CurSpace = this.GameSession.CreateNamedSpace("Test_Space_`num`", Archetype.Find("Space"));
            JDebug("Created A new Space. Space number is: `num`");
        }
        
        // only load into spaces that are not the main space
        if(this.CurSpace != null)
        {
            // NOTE: if you create a space (N) and then create an object (O) before you set a level (1, 2 or 3) it will exist invisibly
            //       The next level you load will contain this object. switching level will then remove it
            //       If you want to avoid this behavior you need to call space.DestroyAllObjects() before loading the level.
        
             // load level 1 into the current level
            if(event.Key == Keys.One)
            {
                //this.CurSpace.DestroyAll();   /// see note above
                this.CurSpace.LoadLevel(Level.Find("TestLevel1"));
            }
            
             // load level 2 into the current level
            if(event.Key == Keys.Two)
            {
                this.CurSpace.LoadLevel(Level.Find("TestLevel2"));
            }
            
            // load level 3 into the current level
            if(event.Key == Keys.Three)
            {
                this.CurSpace.LoadLevel(Level.Find("TestLevel3"));
            }
            
            // Add an object to the current space. The object will be offset based on the number of spaces,
            // and will display the layer number that its space is being drawn on.
            if(event.Key == Keys.O)
            {
                var i = this.GameSession.SpaceTracker.Count;
                this.Object = this.CurSpace.CreateAtPosition(Archetype.Find("LevelInfo"), Real3(i,i,0));
                JDebug("Created Object `this.Object` in Space `this.CurSpace`");
            }
            
            // list the reference to the current object. Used to show that after loading a level the object is destroyed.
            if(event.Key == Keys.R)
            {
                JDebug("My Obj: `this.Object`");
            }
        }
    }
}