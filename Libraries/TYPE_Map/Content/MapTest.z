/******************************************************************************/
/*!
@brief      Demonstrating the use of the Map Type
@date       02/26/2015
@author     Johannes Peter (j.peter\@digipen.edu)
@par        url: https://github.com/JohannesMP/Zilch-Snippets-and-Libraries
@details

@todo
    - It would be nice to be able to create in-line delegates for Map.GetKeyCompare and Map.GetValueCompare
      Currently my examples rely on setting up a function, which are used in Test_Sort()

@copyright
    This Script is provided for all DigiPen students to use, copy, modify, etc. without limitations.
    All content Â© 2015 DigiPen (USA) Corporation, all rights reserved
*/
/******************************************************************************/

class MapTest : ZilchComponent
{
    function Initialize(init : CogInitializer)
    {
        //this.Test_Add_Remove_Foreach();
        this.Test_Sort();
    }
    
    function Test_Add_Remove_Foreach()
    {
        // the print format
        var format   = "\t[ %5s -> %s ]\n";
        
        
        /////////////////////////////////////////////////////////////
        // 1. Creating a map and initializing it.
        var map = new Map[String, Real3]()[ ["foo",   Real3(1,1,1) ],
                                            ["derp",  Real3(3,3,3) ],
                                            ["bar",   Real3(2,2,2) ],
                                            ["glork", Real3(4,4,4) ] ];
                                            // This syntax just calls .Add(key, value) on the map
                                            
        
        /////////////////////////////////////////////////////////////
        // 2. Printing the map's contents via foreach
        Console.Write("\nMap with `map.Count` elements:\n[\n");
        foreach(var pair in map)
        {
            Console.Write(String.FormatC(format, pair.Key, pair.Value));
        }
        Console.Write("]\n");
        
        
        /////////////////////////////////////////////////////////////
        // 3. Modifying the Map (outside of the foreach loop
        Console.Write("\nRemoving 'derp', 'glork', and adding 'blarg'...\n");
        map.Remove("derp");
        map.Remove("glork");
        map.Add("blarg", Real3(1,2,3));


        /////////////////////////////////////////////////////////////
        // 4. Iteration validation via ModID
        Console.Write("\nMap with `map.Count` elements:\n[\n");
        foreach(var pair in map)
        {
            // Uncomment the following to check ModID validation:
            
            // removal invalidates the iteration:
            // map.Remove("foo");
            
            // addition invalidates the iteration
            // map.Add("foob", Real3(1,2,3));
            
            // changing a key's value does not invalidate the iteration
            map.Set("bar", Real3(0,0,0));
            
            Console.Write(String.FormatC(format, pair.Key, pair.Value));
        }
        Console.Write("]\n\n");
    }
    
    function Test_Sort()
    {
        // the print format
        var format   = "\t[ %2s -> <%f> ]\n";
        
        var map = new Map[Real3, RandContainer]();
        map.Add(Real3(1,4,0), new RandContainer());
        map.Add(Real3(2,0,2), new RandContainer());
        map.Add(Real3(0,5,3), new RandContainer());
        map.Add(Real3(6,3,9), new RandContainer());
        map.Add(Real3(4,4,8), new RandContainer());
        map.Add(Real3(2,1,1), new RandContainer());
        
        
        /////////////////////////////////////////////////////////////
        // 1. The unsorted map
        
        Console.Write("Unsorted Map: \n[\n");
        foreach(var pair in map)
        {
            Console.Write(String.FormatC(format, pair.Key, pair.Value.MyRand));
        }
        Console.Write("]\n");
        
        
        /////////////////////////////////////////////////////////////
        // 2. Sorting the map by the X component of the key
        
        // set up our key compare function to use the x value of the real3 keys
        map.GetKeyCompare = this.PointToX;
        
        Console.Write("Map Sorted by X component of Key: \n[\n");
        foreach(var pair in map.SortByKeys())
        {
            Console.Write(String.FormatC(format, pair.Key, pair.Value.MyRand));
        }
        Console.Write("]\n");
        
        
        /////////////////////////////////////////////////////////////
        // 3. Sorting the map by distance from origin of the key
        
        // set up our key compare function to use the distance of the key
        map.GetKeyCompare = this.PointToDist;
        
        Console.Write("Map Sorted by Distance of Key: \n[\n");
        foreach(var pair in map.SortByKeys())
        {
            var curDist = map.GetKeyCompare(pair.Key);
            Console.Write(String.FormatC(format, "`pair.Key` <dist: `curDist`>", pair.Value.MyRand));
        }
        Console.Write("]\n");
        
        
        /////////////////////////////////////////////////////////////
        // 4. Sorting the map by the 'MyRand' Property of the value
        
        // set up our key compare function to use the distance of the key
        map.GetValueCompare = this.RandContainerToReal;
        
        Console.Write("Map Sorted by 'MyRand' component of Value: \n[\n");
        foreach(var pair in map.SortByValues())
        {
            Console.Write(String.FormatC(format, pair.Key, pair.Value.MyRand));
        }
        Console.Write("]\n");
    
    }
    
    /*
        Helper sort functions used in Test_Sort()
    */
    function PointToX(key : Real3) : Real { return key.X; }
    function PointToDist(key : Real3) : Real { return Math.Length(key); }
    function RandContainerToReal(val : RandContainer) : Real { return val.MyRand; }
}


// an example container used as the value in Test_Sort()
class RandContainer {
    var MyRand : Real;
    constructor()
    {
        this.MyRand = new Random().Real();
    }
}
